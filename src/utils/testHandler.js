import config from "../config/config.js";
import { meetExperts } from "../config/messages.js";
import { testQuestions, resultText } from "../config/testConfig.js";
import { getCourseInfoKeyboard, startLessonKeyboard } from "../keyboards/inline.js";
import { User } from "../models/User.js";
import { sendAdvert } from "./sendAdvert.js";

export async function completedBefore(ctx) {
  const telegramId = ctx.from.id;
  const { testCompleted, testResult } = await User.findOne({ telegramId });

  if (testCompleted) {
    await ctx.editMessageText(`üéÇ –¢–µ—Å—Ç <b>"–ö–∞–∫–æ–π —Ç—ã –∫–æ–Ω–¥–∏—Ç–µ—Ä?"</b>\n\n–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç.\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\nüç∞ ${resultText[testResult]}`, { parse_mode: "HTML" });

    // –ó–ù–ê–ö–û–ú–ò–ú –° –≠–ö–°–ü–ï–†–¢–ê–ú–ò
    await ctx.reply(meetExperts, {
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: getCourseInfoKeyboard }
    });

    // TEMPORATY: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞
    // await ctx.reply("–ù–∞—á–Ω–∏—Ç–µ —É—Ä–æ–∫!", { reply_markup: { inline_keyboard: startLessonKeyboard } })
  } else {
    await sendTestQuestion(ctx, 0, { A: 0, B: 0, C: 0 });
  }
}

async function sendTestResult(ctx, answers) {

  const telegramId = ctx.from.id;
  const user = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;

  const result = Object.entries(answers).reduce((a, b) => (b[1] > a[1] ? b : a))[0];

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
  await User.findOneAndUpdate({ telegramId }, { testCompleted: true, testResult: result });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await ctx.editMessageText(`üéÇ –¢–µ—Å—Ç <b>"–ö–∞–∫–æ–π —Ç—ã –∫–æ–Ω–¥–∏—Ç–µ—Ä?"</b>\n\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\nüç∞ ${resultText[result]}`, { parse_mode: "HTML" });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–µ—Å–µ–¥—É
  const message = `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç "–ö–∞–∫–æ–π —Ç—ã –∫–æ–Ω–¥–∏—Ç–µ—Ä?"\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultText[result].split(".")[0]}!`;
  await ctx.telegram.sendMessage(config.GROUP_ID, decodeURIComponent(encodeURIComponent(message)));

  // –ó–ù–ê–ö–û–ú–ò–ú –° –≠–ö–°–ü–ï–†–¢–ê–ú–ò
  await ctx.reply(meetExperts, {
    parse_mode: "HTML",
    reply_markup: { inline_keyboard: getCourseInfoKeyboard }
  });

}

export async function sendTestQuestion(ctx, index, answers) {
  if (index >= testQuestions.length) {
    return sendTestResult(ctx, answers);
  }

  const questionData = testQuestions[index];

  await ctx.editMessageText(
    `üéÇ –¢–µ—Å—Ç <b>"–ö–∞–∫–æ–π —Ç—ã –∫–æ–Ω–¥–∏—Ç–µ—Ä?"</b>\n\n–í–æ–ø—Ä–æ—Å ${index + 1} –∏–∑ ${testQuestions.length}:\n${questionData.question}\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n${questionData.options[0]}${questionData.options[1]}${questionData.options[2]}`,
    {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          ["A", "B", "C"].map((option, i) => ({
            text: option,
            callback_data: `answer_${["A", "B", "C"][i]}_${index}_${answers.A}_${answers.B}_${answers.C}`,
          })),
        ]
      },
    });
}